plugins {
    id 'play'
    id 'idea'
}

def playVersion = "2.6.20"
def scalaVersion = System.getProperty("scala.binary.version", /* default = */ "2.12")

model {
    components {
        play {
            platform play: playVersion, scala: scalaVersion, java: '1.8'
            injectedRoutesGenerator = true

            sources {
                twirlTemplates {
                    defaultImports = TwirlImports.JAVA
                }
            }
        }
    }
}

idea.module {
    // Source directories
    sourceDirs += file('app')
    testSourceDirs += file('test')

    // Generated sources
    def generated = [
            file("$buildDir/playBinary/src/compilePlayBinaryRoutes"),
            file("$buildDir/playBinary/src/compilePlayBinaryTwirlTemplates")
    ]
    generated.each { src ->
        sourceDirs += src
        generatedSourceDirs += src
    }

    // Output directories
    outputDir = file("$buildDir/playBinary/classes")
    testOutputDir = file("$buildDir/playBinary/testClasses")

    // Excluded dirs
    excludeDirs -= buildDir
    excludeDirs += [
            outputDir,
            testOutputDir,
            file("$buildDir/playBinary/lib"),
            file("$buildDir/playBinary/reports"),
            file("$buildDir/playBinary/results"),
            file("$buildDir/tmp"),
            file("$buildDir/assets")
    ]

    // Dependencies
    scopes.COMPILE = [ 'plus' : [ configurations.play ] ]
    scopes.TEST = [ 'plus' : [ configurations.playTest ] ]

    iml.withXml { provider ->
        def content = provider.node.component.content.first()

        // Resources
        def confUrl = 'file://$MODULE_DIR$/conf'
        def confAttrs = content.find { it.@url == confUrl }?.attributes()
        if (confAttrs) {
            confAttrs.remove('isTestSource')
            confAttrs.type = 'java-resource'
        } else {
            content.appendNode('sourceFolder', [url: confUrl, type: 'java-resource'])
        }

        // Test resources
        def testResourcesUrl = 'file://$MODULE_DIR$/test/resources'
        def testResourcesAttrs = content.find { it.@url == testResourcesUrl }?.attributes()
        if (testResourcesAttrs) {
            testResourcesAttrs.remove('isTestSource')
            testResourcesAttrs.type = 'java-test-resource'
        } else {
            content.appendNode('sourceFolder', [url: testResourcesUrl, type: 'java-resource'])
        }
    }
}

dependencies {
    play "com.typesafe.play:play-guice_$scalaVersion:$playVersion"
    play "com.typesafe.play:play-logback_$scalaVersion:$playVersion"
    play "com.typesafe.play:play-java-jpa_$scalaVersion:$playVersion"

    play "org.hibernate:hibernate-core:5.2.5.Final"
    play "com.h2database:h2:1.4.197"

    playTest "org.assertj:assertj-core:3.6.2"
    playTest "org.awaitility:awaitility:2.0.0"
}

repositories {
    jcenter()
    maven {
        name "lightbend-maven-releases"
        url "https://repo.lightbend.com/lightbend/maven-release"
    }
    ivy {
        name "lightbend-ivy-release"
        url "https://repo.lightbend.com/lightbend/ivy-releases"
        layout "ivy"
    }
}
